#!/bin/bash
set -euo pipefail
umask 077

# Load configuration files following established pattern
source /usr/local/share/soc2-scripts/config/common.conf
source /usr/local/share/soc2-scripts/config/auditd-report.conf

# Generate timestamped filenames for audit trail
DATE_STAMP=$(date +%Y%m%d)
REPORT_FILE="${LOG_DIR}/daily-report-${DATE_STAMP}.txt"
TEMP_FILE="/tmp/auditd-${DATE_STAMP}.tmp"

# Log report generation to syslog for Grafana Cloud integration
logger -p daemon.notice "AUDITD REPORT: Starting daily audit report generation"

# Ensure log directory exists with proper permissions
if [ ! -d "$LOG_DIR" ]; then
    logger -p daemon.error "AUDITD REPORT: Log directory missing - audit logging may be compromised"
    echo "CRITICAL: Audit log directory missing at $LOG_DIR" | mail -s "[SECURITY CRITICAL] Audit logging failure - $(hostname)" "$ADMIN_EMAIL"
    exit 1
fi

# Extract yesterday's audit events for analysis
# Using raw format for easier parsing and correlation
if ! ausearch --start yesterday --end today --format raw > "$TEMP_FILE" 2>/dev/null; then
    logger -p daemon.warning "AUDITD REPORT: No audit events found for yesterday - this may indicate a problem"
    echo "No audit events captured for $(date -d yesterday +%F)" > "$TEMP_FILE"
fi

# Initialize report with header information
{
    echo "AUDITD DAILY SECURITY REPORT"
    echo "============================"
    echo "Generated: $(date)"
    echo "Host: $(hostname)"
    echo "Report Period: $(date -d yesterday +%F) 00:00:00 - 23:59:59"
    echo ""
} > "$REPORT_FILE"

# Count total events for volume assessment
TOTAL_EVENTS=$(wc -l < "$TEMP_FILE" 2>/dev/null || echo 0)

# Parse security-relevant events with comprehensive pattern matching
# Authentication failures indicate potential brute force attempts
FAILED_LOGIN_COUNT=$(grep -Ei 'res=failed|res=0|FAILED' "$TEMP_FILE" 2>/dev/null | grep -E 'type=USER_LOGIN|type=USER_AUTH' | wc -l || echo 0)

# Privilege escalation attempts may indicate compromise attempts
PRIV_ESCALATION_COUNT=$(grep -E 'type=USER_CMD|type=USER_START' "$TEMP_FILE" 2>/dev/null | grep -E 'exe="/usr/bin/sudo"|exe="/bin/su"' | wc -l || echo 0)

# File modifications to critical system files
CRITICAL_CHANGES=$(grep -E 'type=PATH' "$TEMP_FILE" 2>/dev/null | grep -E '/etc/passwd|/etc/shadow|/etc/sudoers|/etc/ssh/sshd_config' | wc -l || echo 0)

# Configuration changes that could weaken security
CONFIG_CHANGES=$(grep -E 'key="(audit_config_changes|auth_config_changes|ssh_config_changes)"' "$TEMP_FILE" 2>/dev/null | wc -l || echo 0)

# File deletions that might indicate covering tracks
FILE_DELETIONS=$(grep -E 'key="file_deletion"' "$TEMP_FILE" 2>/dev/null | wc -l || echo 0)

# Generate summary statistics section
{
    echo "SUMMARY STATISTICS"
    echo "=================="
    echo "Total audit events: $TOTAL_EVENTS"
    echo "Failed login attempts: $FAILED_LOGIN_COUNT"
    echo "Privilege escalations: $PRIV_ESCALATION_COUNT"
    echo "Critical file changes: $CRITICAL_CHANGES"
    echo "Configuration changes: $CONFIG_CHANGES"
    echo "File deletions tracked: $FILE_DELETIONS"
    echo ""
} >> "$REPORT_FILE"

# Detailed analysis sections for significant events
if [ "$FAILED_LOGIN_COUNT" -gt 0 ]; then
    {
        echo "AUTHENTICATION FAILURES"
        echo "======================"
        grep -Ei 'res=failed|res=0|FAILED' "$TEMP_FILE" 2>/dev/null | grep -E 'type=USER_LOGIN|type=USER_AUTH' | head -10 || echo "No details available"
        if [ "$FAILED_LOGIN_COUNT" -gt 10 ]; then
            echo "... and $((FAILED_LOGIN_COUNT - 10)) more entries"
        fi
        echo ""
    } >> "$REPORT_FILE"
fi

if [ "$CRITICAL_CHANGES" -gt 0 ]; then
    {
        echo "CRITICAL FILE MODIFICATIONS"
        echo "=========================="
        grep -E 'type=PATH' "$TEMP_FILE" 2>/dev/null | grep -E '/etc/passwd|/etc/shadow|/etc/sudoers|/etc/ssh/sshd_config' | head -5 || echo "No details available"
        echo ""
    } >> "$REPORT_FILE"
fi

# Append report metadata for audit trail
{
    echo "REPORT INFORMATION"
    echo "=================="
    echo "Report generated by: $(basename "$0")"
    echo "Temporary data file: $TEMP_FILE (cleaned)"
    echo "Report location: $REPORT_FILE"
    echo "Compressed archive: ${REPORT_FILE}.gz"
} >> "$REPORT_FILE"

# Calculate security concern level for appropriate alerting
SECURITY_CONCERNS=$((FAILED_LOGIN_COUNT + CRITICAL_CHANGES + CONFIG_CHANGES))

# Send notification based on severity of findings
if [ "$SECURITY_CONCERNS" -gt 10 ]; then
    # Critical security events requiring immediate attention
    logger -p daemon.crit "AUDITD REPORT: CRITICAL - $SECURITY_CONCERNS security events detected requiring immediate review"
    mail -s "[SECURITY CRITICAL] Audit Report - $SECURITY_CONCERNS security events - $(hostname) - $(date +%F)" "$ADMIN_EMAIL" < "$REPORT_FILE"
elif [ "$SECURITY_CONCERNS" -gt 0 ]; then
    # Notable security events requiring review
    logger -p daemon.warning "AUDITD REPORT: WARNING - $SECURITY_CONCERNS security events detected"
    mail -s "[SECURITY WARNING] Audit Report - $SECURITY_CONCERNS security events - $(hostname) - $(date +%F)" "$ADMIN_EMAIL" < "$REPORT_FILE"
else
    # Clean report for compliance records
    logger -p daemon.notice "AUDITD REPORT: No significant security events detected"
    mail -s "[AUDIT] Daily Audit Report - Clean - $(hostname) - $(date +%F)" "$ADMIN_EMAIL" < "$REPORT_FILE"
fi

# Compress report for efficient storage
if [ -f "$REPORT_FILE" ]; then
    gzip -9 "$REPORT_FILE"

    # Create convenience symlink to latest compressed report
    ln -sf "${REPORT_FILE}.gz" "${LOG_DIR}/latest-daily-report.gz" 2>/dev/null || true
fi

# Clean up temporary file securely
[ -f "$TEMP_FILE" ] && shred -zu "$TEMP_FILE" 2>/dev/null || rm -f "$TEMP_FILE"

# Log successful completion for monitoring
logger -p daemon.notice "AUDITD REPORT: Daily report completed successfully with $SECURITY_CONCERNS security events"

exit 0